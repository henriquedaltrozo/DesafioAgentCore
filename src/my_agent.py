
from bedrock_agentcore import BedrockAgentCoreApp
import sys
import os

from src.analyzer import Analyzer
sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))
from email_sender import EmailSender
import os
import json
from datetime import datetime
import numpy as np
import pandas as pd
from dotenv import load_dotenv
import boto3
from botocore.exceptions import ClientError

# Carregar vari√°veis de ambiente
load_dotenv()

# Configurar AWS com vari√°veis de ambiente
aws_access_key = os.getenv('AWS_ACCESS_KEY_ID')
aws_secret_key = os.getenv('AWS_SECRET_ACCESS_KEY')
aws_region = os.getenv('AWS_DEFAULT_REGION', 'us-east-1')

# Cliente Bedrock para IA (opcional)
try:
    bedrock_client = boto3.client(
        'bedrock-runtime',
        region_name=aws_region,
        aws_access_key_id=aws_access_key,
        aws_secret_access_key=aws_secret_key
    ) if aws_access_key and aws_secret_key else boto3.client('bedrock-runtime', region_name=aws_region)
except Exception:
    bedrock_client = None  # Fallback para modo sem Bedrock

def make_json_serializable(obj):
    """Converte objetos para tipos serializ√°veis em JSON"""
    if isinstance(obj, dict):
        return {str(k): make_json_serializable(v) for k, v in obj.items()}
    elif isinstance(obj, list):
        return [make_json_serializable(v) for v in obj]
    elif isinstance(obj, np.integer):
        return int(obj)
    elif isinstance(obj, np.floating):
        return float(obj)
    elif isinstance(obj, np.ndarray):
        return obj.tolist()
    elif isinstance(obj, pd.DataFrame):
        return obj.to_dict('records')
    elif isinstance(obj, pd.Series):
        return obj.to_dict()
    else:
        return obj

app = BedrockAgentCoreApp()

def get_ai_response(user_message, context_data=None):
    """Gera resposta inteligente baseada nos dados"""
    try:
        # Tentar usar Bedrock Claude primeiro
        system_prompt = """
Voc√™ √© um assistente virtual especializado em analisar reclama√ß√µes do Sicredi no site Reclame Aqui.  
Seu objetivo √© conversar de forma natural, amig√°vel e √∫til, transformando dados em insights claros e pr√°ticos.

üîπ ESTILO DE COMUNICA√á√ÉO
- Seja conversacional e fluido, evitando parecer um manual t√©cnico.
- Traga explica√ß√µes como se fosse uma pessoa pr√≥xima ajudando, n√£o um rob√¥.
- Use linguagem clara, frases corridas e s√≥ use listas curtas quando realmente organizar melhor a informa√ß√£o.
- Pode usar emojis com modera√ß√£o para dar leveza.
- Sempre ofere√ßa pr√≥ximos passos: "Quer que eu detalhe isso em relat√≥rio?", "Prefere que eu envie por e-mail?", "Posso mostrar os dados em gr√°fico, se quiser."

üîπ O QUE VOC√ä CONSEGUE FAZER
1. **Situa√ß√£o geral**
   - Resumir o panorama atual das reclama√ß√µes.
   - Mostrar taxa de resolu√ß√£o, principais categorias, evolu√ß√£o ao longo do tempo.

2. **Categorias**
   - Identificar categorias mais cr√≠ticas ou com menos problemas.
   - Comparar categorias (ex: Cart√£o vs App).
   - Explicar tend√™ncias em categorias espec√≠ficas.

3. **Status das reclama√ß√µes**
   - Quantas foram resolvidas, pendentes, n√£o respondidas.
   - Calcular taxa de resolu√ß√£o geral e por categoria.
   - Indicar onde est√£o os gargalos.

4. **Tend√™ncias e padr√µes**
   - Mostrar evolu√ß√£o das reclama√ß√µes ao longo do tempo.
   - Identificar picos, sazonalidades ou quedas.
   - Destacar mudan√ßas recentes que merecem aten√ß√£o.

5. **Recomenda√ß√µes**
   - Sugerir a√ß√µes pr√°ticas de melhoria (atendimento, processos, canais).
   - Propor metas realistas para aumentar a taxa de resolu√ß√£o.
   - Apontar oportunidades de aprendizado com categorias que j√° t√™m bons resultados.

6. **Relat√≥rios**
   - Gerar relat√≥rio em PDF com gr√°ficos e an√°lises detalhadas.
   - Enviar relat√≥rio por e-mail, se solicitado.

üîπ COMO RESPONDER
- Quando pedirem situa√ß√£o geral ‚Üí traga um resumo narrativo dos dados.
- Quando perguntarem por categorias ‚Üí explique a mais problem√°tica e a mais tranquila, de forma comparativa.
- Quando pedirem melhorias ‚Üí sugira a√ß√µes simples primeiro, depois estrat√©gias mais avan√ßadas.
- Quando falarem em relat√≥rio ou PDF ‚Üí explique que pode gerar e/ou enviar por e-mail.
- Quando perguntarem ‚Äúo que voc√™ pode fazer‚Äù ‚Üí liste as principais capacidades de forma curta e simp√°tica.
- Se n√£o houver dados carregados ‚Üí explique que precisa analisar primeiro e oriente o usu√°rio.

üîπ TONS DE RESPOSTA (exemplos)
- Sauda√ß√£o: "Oi! üëã Tudo bem? Posso te mostrar como est√£o as reclama√ß√µes do Sicredi no Reclame Aqui ou preparar uma an√°lise mais detalhada."
- Situa√ß√£o geral: "No momento temos X reclama√ß√µes registradas. A categoria que mais preocupa √© Y, enquanto Z √© a mais tranquila. A taxa de resolu√ß√£o est√° em W%."
- Categoria: "A categoria mais cr√≠tica √© Cart√£o, com N casos, j√° a de menor incid√™ncia √© PIX, com apenas M."
- Melhoria: "Um bom caminho seria focar primeiro nos casos pendentes de Cart√£o, revisar o processo de atendimento e criar uma for√ßa-tarefa r√°pida. Quer que eu detalhe isso em um relat√≥rio?"
- Relat√≥rio: "Posso gerar um relat√≥rio completo com gr√°ficos e insights. Quer que eu crie em PDF ou prefira que eu envie direto para o seu e-mail?"

Lembre-se: sempre soe como um analista pr√≥ximo e colaborativo, e n√£o como um chatbot gen√©rico.
"""
        
        context = ""
        if context_data:
            context = f"\n\nDados dispon√≠veis: {json.dumps(context_data, indent=2, ensure_ascii=False)}"
        
        prompt = f"{system_prompt}\n\nPergunta do usu√°rio: {user_message}{context}"
        
        if bedrock_client is None:
            raise Exception("Bedrock client is not available.")
        
        response = bedrock_client.invoke_model(
            modelId='amazon.nova-micro-v1:0',
            body=json.dumps({
                "messages": [
                    {
                        "role": "user",
                        "content": [{
                            "text": prompt
                        }]
                    }
                ],
                "inferenceConfig": {
                    "max_new_tokens": 1000,
                    "temperature": 0.7
                }
            })
        )
        
        response_body = json.loads(response['body'].read())
        return response_body['output']['message']['content'][0]['text']
        
    except Exception as e:
        # Fallback para respostas baseadas em regras
        return get_rule_based_response(user_message, context_data)

def get_rule_based_response(user_message, context_data=None):
    """Respostas inteligentes baseadas em regras quando Bedrock n√£o est√° dispon√≠vel"""
    msg_lower = user_message.lower()
    
    # Sauda√ß√µes
    if any(word in msg_lower for word in ['oi', 'ol√°', 'hello', 'bom dia', 'boa tarde']):
        return "Ol√°! Sou o agente de an√°lise de reclama√ß√µes do Sicredi. Posso ajudar com:\n\nüìä CONSULTAS:\n‚Ä¢ Situa√ß√£o atual das reclama√ß√µes\n‚Ä¢ Categorias mais problem√°ticas\n‚Ä¢ Status de resolu√ß√£o\n\nüí° AN√ÅLISES:\n‚Ä¢ Insights e recomenda√ß√µes\n‚Ä¢ Compara√ß√µes entre categorias\n‚Ä¢ Tend√™ncias e padr√µes\n\nüìã RELAT√ìRIOS:\n‚Ä¢ Gerar an√°lise completa em PDF\n‚Ä¢ Enviar relat√≥rios por email\n\nO que gostaria de saber?"
    
    # Resposta padr√£o
    if context_data:
        total = context_data.get('total_reclamacoes', 0)
        return f"ü§ñ Tenho {total} reclama√ß√µes analisadas. Posso ajudar com:\n\nüìä CONSULTAS R√ÅPIDAS:\n‚Ä¢ 'Situa√ß√£o atual' - Resumo geral\n‚Ä¢ 'Categoria cr√≠tica' - Maior problema\n‚Ä¢ 'Taxa de resolu√ß√£o' - Status atual\n\nüí° AN√ÅLISES AVAN√áADAS:\n‚Ä¢ 'Como melhorar?' - Recomenda√ß√µes\n‚Ä¢ 'Gerar relat√≥rio' - PDF completo\n‚Ä¢ 'Enviar para email@exemplo.com' - Relat√≥rio por email\n\nQual informa√ß√£o precisa?"
    return "ü§ñ Sistema de an√°lise de reclama√ß√µes. Digite 'analisar reclama√ß√µes' para carregar os dados e come√ßar a an√°lise."
    
    # Perguntas sobre categorias - mais inteligente
    if any(word in msg_lower for word in ['categoria', 'tipo', 'problema']):
        if context_data and 'categorias' in context_data:
            cats = context_data['categorias']
            if cats:
                # Ordenar categorias por quantidade
                sorted_cats = sorted(cats.items(), key=lambda x: x[1]['count'], reverse=True)
                
                # Detectar se pergunta √© sobre "mais" ou "menos"
                if any(word in msg_lower for word in ['menos', 'menor', 'baixa', 'm√≠nimo', 'pequena']):
                    # Categoria com MENOS reclama√ß√µes
                    bottom_cat = sorted_cats[-1]  # √öltimo da lista (menor)
                    return f"üìâ CATEGORIA COM MENOS RECLAMA√á√ïES:\n‚Ä¢ {bottom_cat[0]}: {bottom_cat[1]['count']} casos ({bottom_cat[1]['percentage']}%)\n‚Ä¢ Esta categoria est√° com baixa incid√™ncia\n‚Ä¢ Pode indicar processo bem estruturado\n"
                
                elif any(word in msg_lower for word in ['mais', 'maior', 'alta', 'm√°ximo', 'cr√≠tica', 'problem√°tica']):
                    # Categoria com MAIS reclama√ß√µes  
                    top_cat = sorted_cats[0]  # Primeiro da lista (maior)
                    return f"üéØ CATEGORIA COM MAIS RECLAMA√á√ïES:\n‚Ä¢ {top_cat[0]}: {top_cat[1]['count']} casos ({top_cat[1]['percentage']}%)\n‚Ä¢ Requer aten√ß√£o imediata\n‚Ä¢ Categoria mais problem√°tica identificada\n"
                
                else:
                    # Pergunta geral sobre categorias
                    top_cat = sorted_cats[0]
                    return f"üìä RESUMO DAS CATEGORIAS:\n‚Ä¢ Mais problem√°tica: {top_cat[0]} ({top_cat[1]['count']} casos)\n‚Ä¢ Total de categorias: {len(cats)}\n‚Ä¢ Distribui√ß√£o variada identificada\n"
                    
        return "As principais categorias s√£o: Cart√£o, App, PIX, Cobran√ßa, Atendimento e Conta. Digite 'analisar reclama√ß√µes' para ver detalhes completos."
    
    # Perguntas sobre status das reclama√ß√µes
    if any(word in msg_lower for word in ['resolvido', 'resolvida', 'status', 'pendente', 'respondida']):
        if context_data and 'status' in context_data:
            status_data = context_data['status']
            if status_data:
                sorted_status = sorted(status_data.items(), key=lambda x: x[1]['count'], reverse=True)
                
                if any(word in msg_lower for word in ['resolvido', 'resolvida', 'solucionado']):
                    resolvidos = status_data.get('Resolvido', {})
                    total = sum(s['count'] for s in status_data.values())
                    if resolvidos:
                        taxa = (resolvidos['count'] / total) * 100
                        return f"‚úÖ RECLAMA√á√ïES RESOLVIDAS:\n‚Ä¢ Quantidade: {resolvidos['count']} casos\n‚Ä¢ Percentual: {resolvidos['percentage']}%\n‚Ä¢ Taxa geral: {taxa:.1f}% do total\n‚Ä¢ Status: {'Excelente' if taxa > 80 else 'Cr√≠tico' if taxa < 50 else 'Regular'}\n\nQuer estrat√©gias para melhorar?"
                    
                elif any(word in msg_lower for word in ['pendente', 'n√£o resolvido', 'aberta', 'em aberto']):
                    nao_resolvidos = status_data.get('N√£o resolvido', {})
                    nao_respondidas = status_data.get('N√£o respondida', {})
                    total_pendentes = (nao_resolvidos.get('count', 0) + nao_respondidas.get('count', 0))
                    return f"‚ö†Ô∏è RECLAMA√á√ïES PENDENTES:\n‚Ä¢ N√£o resolvidas: {nao_resolvidos.get('count', 0)} ({nao_resolvidos.get('percentage', 0)}%)\n‚Ä¢ N√£o respondidas: {nao_respondidas.get('count', 0)} ({nao_respondidas.get('percentage', 0)}%)\n‚Ä¢ Total pendente: {total_pendentes} casos\n‚Ä¢ Prioridade: ALTA - Requer a√ß√£o imediata!\n\nPrecisa de plano de a√ß√£o?"
                    
                else:
                    # Resumo geral dos status
                    return f"üìã RESUMO DOS STATUS:\n" + "\n".join([f"‚Ä¢ {status}: {data['count']} ({data['percentage']}%)" for status, data in sorted_status]) + f"\n\nTotal analisado: {sum(s['count'] for s in status_data.values())} reclama√ß√µes"
        
        return "Para ver o status das reclama√ß√µes, digite 'analisar reclama√ß√µes' para carregar os dados."
    
    # Perguntas sobre funcionalidades
    if any(word in msg_lower for word in ['funcionalidade', 'fun√ß√£o', 'fazer', 'pode', 'ajuda', 'sistema', 'usar']):
        if context_data:
            total = context_data.get('total_reclamacoes', 0)
            return f"ü§ñ SISTEMA DE AN√ÅLISE DE RECLAMA√á√ïES SICREDI\n\nüìä DADOS DISPON√çVEIS:\n‚Ä¢ {total} reclama√ß√µes analisadas\n‚Ä¢ M√∫ltiplas categorias (App, Cart√£o, PIX, etc.)\n‚Ä¢ Status de resolu√ß√£o detalhado\n\nüîç O QUE POSSO FAZER:\n‚Ä¢ Consultar situa√ß√£o atual\n‚Ä¢ Identificar categorias cr√≠ticas\n‚Ä¢ Sugerir melhorias\n‚Ä¢ Gerar relat√≥rios PDF\n‚Ä¢ Enviar an√°lises por email\n\nüí¨ EXEMPLOS DE PERGUNTAS:\n‚Ä¢ 'Qual a situa√ß√£o atual?'\n‚Ä¢ 'Categoria mais problem√°tica?'\n‚Ä¢ 'Como melhorar o atendimento?'\n‚Ä¢ 'Gerar relat√≥rio completo'\n\nO que gostaria de saber?"
        return "ü§ñ Sistema de an√°lise de reclama√ß√µes do Sicredi. Digite 'analisar reclama√ß√µes' para carregar os dados e ver todas as funcionalidades dispon√≠veis."
    
    # Perguntas sobre situa√ß√£o atual
    if any(word in msg_lower for word in ['situa√ß√£o', 'status', 'como est√°', 'resumo', 'geral']):
        if context_data:
            total = context_data.get('total_reclamacoes', 0)
            categorias = len(context_data.get('categorias', {}))
            status_data = context_data.get('status', {})
            resolvidos = status_data.get('Resolvido', {}).get('count', 0) if status_data else 0
            taxa_resolucao = (resolvidos / total * 100) if total > 0 else 0
            
            # Categoria mais cr√≠tica
            cats = context_data.get('categorias', {})
            categoria_critica = max(cats.items(), key=lambda x: x[1]['count'])[0] if cats else 'N/A'
            
            status_icon = 'üî¥' if taxa_resolucao < 50 else 'üü°' if taxa_resolucao < 70 else 'üü¢'
            
            return f"üìä SITUA√á√ÉO ATUAL DAS RECLAMA√á√ïES:\n\nüìà N√öMEROS GERAIS:\n‚Ä¢ Total: {total} reclama√ß√µes\n‚Ä¢ Categorias: {categorias} diferentes\n‚Ä¢ Mais cr√≠tica: {categoria_critica}\n\n{status_icon} RESOLU√á√ÉO:\n‚Ä¢ Taxa atual: {taxa_resolucao:.1f}%\n‚Ä¢ Status: {'CR√çTICO - A√ß√£o urgente!' if taxa_resolucao < 50 else 'ATEN√á√ÉO - Melhorias necess√°rias' if taxa_resolucao < 70 else 'BOM - Dentro do esperado'}\n\nüí° PR√ìXIMOS PASSOS:\n‚Ä¢ 'Como melhorar?' - Recomenda√ß√µes\n‚Ä¢ 'Gerar relat√≥rio' - An√°lise completa\n‚Ä¢ 'Categoria cr√≠tica' - Detalhes do maior problema"
        return "Para ver a situa√ß√£o atual, preciso analisar os dados. Digite 'analisar reclama√ß√µes'."
    
    # Perguntas sobre melhorias
    if any(word in msg_lower for word in ['melhorar', 'resolver', 'solu√ß√£o', 'como', 'recomenda√ß√£o', 'sugest√£o']):
        if context_data:
            status_data = context_data.get('status', {})
            cats = context_data.get('categorias', {})
            categoria_critica = max(cats.items(), key=lambda x: x[1]['count'])[0] if cats else 'App'
            nao_resolvidos = sum(dados['count'] for status, dados in status_data.items() if status != 'Resolvido')
            
            return f"üí° RECOMENDA√á√ïES ESTRAT√âGICAS:\n\nüö® A√á√ïES IMEDIATAS:\n‚Ä¢ Resolver {nao_resolvidos} casos pendentes\n‚Ä¢ For√ßa-tarefa para categoria {categoria_critica}\n‚Ä¢ SLA de 48h para novas reclama√ß√µes\n\nüîß MELHORIAS DE PROCESSO:\n‚Ä¢ Revisar fluxo de {categoria_critica.lower()}\n‚Ä¢ Treinamento espec√≠fico da equipe\n‚Ä¢ Automatizar respostas padr√£o\n\nüìä MONITORAMENTO:\n‚Ä¢ Dashboard em tempo real\n‚Ä¢ Alertas autom√°ticos\n‚Ä¢ Relat√≥rios semanais\n\nüéØ META: Elevar resolu√ß√£o para >80% em 30 dias\n\nQuer o plano detalhado em PDF?"
        return "üí° Para recomenda√ß√µes espec√≠ficas, preciso analisar os dados primeiro. Digite 'analisar reclama√ß√µes'."
    
    # Comandos de an√°lise
    if any(word in msg_lower for word in ['analisar', 'relat√≥rio', 'gerar', 'pdf', 'completo']):
        return "üìã AN√ÅLISE COMPLETA DISPON√çVEL:\n\nüîç O QUE SER√Å GERADO:\n‚Ä¢ Estat√≠sticas detalhadas por categoria\n‚Ä¢ Gr√°ficos de distribui√ß√£o\n‚Ä¢ An√°lise de tend√™ncias temporais\n‚Ä¢ Insights estrat√©gicos com IA\n‚Ä¢ Recomenda√ß√µes de melhoria\n‚Ä¢ Relat√≥rio PDF profissional\n\n‚ö° OP√á√ïES:\n‚Ä¢ 'Gerar relat√≥rio' - PDF local\n‚Ä¢ 'Enviar para email@exemplo.com' - PDF por email\n‚Ä¢ 'An√°lise r√°pida' - Apenas insights\n\nQual op√ß√£o prefere?"
    


@app.entrypoint
def invoke(payload):
    """Agente de IA para an√°lise inteligente de reclama√ß√µes"""
    user_message = payload.get("prompt", "Analisar reclama√ß√µes")
    recipient_email = payload.get("email", None)
    
    # Carregar dados para contexto da IA
    current_dir = os.path.dirname(os.path.abspath(__file__))
    json_file_path = os.path.join(os.path.dirname(current_dir), "data", "reclamacoes_20251001_220605.json")
    context_data = None
    
    if os.path.exists(json_file_path):
        analyzer = Analyzer(json_file_path)
        if analyzer.load_data():
            context_data = {
                "total_reclamacoes": analyzer.data['metadata']['total_reclamacoes'] if analyzer.data is not None else 0,
                "categorias": analyzer.analyze_categories(),
                "status": analyzer.analyze_status()
            }
    
    # Verificar se √© pergunta conversacional ou comando de an√°lise
    analysis_keywords = ['analisar', 'relat√≥rio', 'gerar', 'pdf', 'email', 'envie', 'enviar', 'detalhado']
    is_analysis_request = any(keyword in user_message.lower() for keyword in analysis_keywords)
    
    # Extrair email da mensagem se mencionado
    if not recipient_email and '@' in user_message:
        import re
        email_match = re.search(r'[\w\.-]+@[\w\.-]+\.\w+', user_message)
        if email_match:
            recipient_email = email_match.group()
            is_analysis_request = True  # For√ßar an√°lise quando email √© mencionado
    
    if not is_analysis_request:
        # Resposta conversacional com IA
        ai_response = get_ai_response(user_message, context_data)
        return {
            "response": ai_response,
            "status": "conversational",
            "context_available": context_data is not None
        }
    
    try:
        # Caminho para o arquivo JSON
        current_dir = os.path.dirname(os.path.abspath(__file__))
        json_file_path = os.path.join(os.path.dirname(current_dir), "data", "reclamacoes_20251001_220605.json")
        
        # Verificar se o arquivo existe
        if not os.path.exists(json_file_path):
            return {
                "result": "Erro: Arquivo de reclama√ß√µes n√£o encontrado.",
                "status": "error"
            }
        
        # Criar inst√¢ncia do analisador
        analyzer = Analyzer(json_file_path)
        
        # Carregar os dados
        if not analyzer.load_data():
            return {
                "result": "Erro ao carregar os dados do arquivo JSON.",
                "status": "error"
            }
        
        # Gerar resumo textual
        summary = analyzer.generate_summary_text()
        
        # Gerar relat√≥rio em PDF
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        pdf_filename = f"relatorio_reclamacoes_{timestamp}.pdf"
        
        # O analyzer j√° vai salvar na pasta results automaticamente
        pdf_success = analyzer.generate_pdf_report(pdf_filename)
        
        # Ajustar o caminho do arquivo para refer√™ncia completa
        if pdf_success:
            pdf_full_path = os.path.join(os.path.dirname(current_dir), "results", pdf_filename)
        
        # Obter estat√≠sticas detalhadas
        categoria_analysis = analyzer.analyze_categories()
        status_analysis = analyzer.analyze_status() or {}
        trends = analyzer.analyze_trends()
        
        # Converter trends para formato JSON serializ√°vel
        trends_serializable = {
            'date_range': trends['date_range'] if trends and 'date_range' in trends else {},
            'daily_trends_count': len(trends['daily_trends']) if trends and hasattr(trends['daily_trends'], '__len__') else 0,
            'weekly_trends_summary': {str(k): int(v) for k, v in trends['weekly_trends'].items()} if trends and hasattr(trends['weekly_trends'], 'items') else {}
        }
        
        result = {
            "summary": summary,
            "categoria_analysis": make_json_serializable(categoria_analysis),
            "status_analysis": make_json_serializable(status_analysis),
            "trends": trends_serializable,
            "pdf_generated": pdf_success,
            "pdf_filename": pdf_full_path if pdf_success else None,
            "status": "success"
        }
        
        # Gerar insights com IA
        resolvidos = status_analysis.get('Resolvido', {}).get('count', 0)
        total = sum(dados['count'] for dados in status_analysis.values())
        taxa_resolucao = (resolvidos / total) * 100
        
        # Gerar insights estrat√©gicos
        analysis_context = {
            "taxa_resolucao": taxa_resolucao,
            "total_reclamacoes": total,
            "categorias": categoria_analysis,
            "status": status_analysis,
            "trends": trends_serializable
        }
        
        # Gerar insights baseados nos dados
        categoria_critica = max(categoria_analysis.items(), key=lambda x: x[1]['count'])[0] if categoria_analysis else "N/A"
        nao_resolvidos = sum(dados['count'] for status, dados in status_analysis.items() if status != 'Resolvido')
        
        ai_insights = f"""üß† INSIGHTS ESTRAT√âGICOS GERADOS:

üìä SITUA√á√ÉO CR√çTICA IDENTIFICADA:
‚Ä¢ Taxa de resolu√ß√£o: {taxa_resolucao:.1f}% (MUITO BAIXA)
‚Ä¢ Casos n√£o resolvidos: {nao_resolvidos} de {total} ({(nao_resolvidos/total)*100:.1f}%)
‚Ä¢ Categoria mais cr√≠tica: {categoria_critica}

üéØ A√á√ïES PRIORIT√ÅRIAS:
1. EMERGENCIAL - Resolver {nao_resolvidos} casos pendentes
2. FOCO - Investigar problemas de {categoria_critica}
3. PROCESSO - Implementar follow-up autom√°tico
4. TREINAMENTO - Capacitar equipe para categorias cr√≠ticas

üí° RECOMENDA√á√ïES ESPEC√çFICAS:
‚Ä¢ Criar for√ßa-tarefa para casos n√£o resolvidos
‚Ä¢ Revisar processo de {categoria_critica.lower()}
‚Ä¢ Implementar SLA de 48h para resposta
‚Ä¢ Dashboard de monitoramento em tempo real

üöÄ META: Elevar taxa de resolu√ß√£o para >80% em 30 dias"""
        
        result["ai_insights"] = ai_insights
        
        # Enviar por e-mail se solicitado
        if recipient_email:
            email_sender = EmailSender()
            email_result = email_sender.send_report_email(
                pdf_full_path if pdf_success else None,
                summary,
                recipient_email
            )
            result["email_sent"] = email_result["success"]
            result["email_message"] = email_result.get("message", email_result.get("error"))
        
        return result
        
    except Exception as e:
        return {
            "result": f"Erro durante a an√°lise: {str(e)}",
            "status": "error"
        }

def executar_analise_rapida(email_destinatario=None):
    """Execu√ß√£o r√°pida e limpa do sistema de an√°lise"""
    print("ü§ñ AGENTE IA - AN√ÅLISE DE RECLAMA√á√ïES SICREDI")
    print("=" * 60)
    
    # Verificar se o arquivo de dados existe
    current_dir = os.path.dirname(os.path.abspath(__file__))
    data_file = os.path.join(os.path.dirname(current_dir), "data", "reclamacoes_20251001_220605.json")
    if not os.path.exists(data_file):
        print(f"Erro: Arquivo {data_file} nao encontrado!")
        return
    
    print("Executando analise completa...")
    
    try:
        payload = {"prompt": "Analisar reclama√ß√µes e gerar relat√≥rio"}
        if email_destinatario:
            payload["email"] = email_destinatario
        
        result = invoke(payload)
        
        if result.get("status") == "success":
            print("Analise concluida com sucesso!")
            print("\nRESULTADOS:")
            print(f"   ‚Ä¢ Total de categorias analisadas: {len(result['categoria_analysis'])}")
            print(f"   ‚Ä¢ Total de status analisados: {len(result['status_analysis'])}")
            print(f"   ‚Ä¢ PDF gerado: {result['pdf_filename']}")
            print(f"   ‚Ä¢ Per√≠odo analisado: {result['trends']['date_range']['start']} a {result['trends']['date_range']['end']}")
            
            # Mostrar insights principais
            print("\nCATEGORIAS MAIS PROBLEMATICAS:")
            for categoria, dados in sorted(result['categoria_analysis'].items(), 
                                         key=lambda x: x[1]['count'], reverse=True)[:3]:
                print(f"   ‚Ä¢ {categoria}: {dados['count']} reclama√ß√µes ({dados['percentage']}%)")
            
            print("\nSTATUS DAS RECLAMACOES:")
            for status, dados in result['status_analysis'].items():
                print(f"   ‚Ä¢ {status}: {dados['count']} ({dados['percentage']}%)")
            
            # Calcular m√©tricas importantes
            resolvidos = result['status_analysis'].get('Resolvido', {}).get('count', 0)
            total = sum(dados['count'] for dados in result['status_analysis'].values())
            taxa_resolucao = (resolvidos / total) * 100
            print(f"\nTAXA DE RESOLUCAO: {taxa_resolucao:.1f}%")
            
            if taxa_resolucao < 50:
                print("CRITICO: Taxa de resolucao muito baixa!")
            elif taxa_resolucao < 70:
                print("ATENCAO: Taxa de resolucao abaixo do ideal")
            else:
                print("Taxa de resolucao dentro do esperado")
            
            # Mostrar status do e-mail se enviado
            if email_destinatario:
                if result.get('email_sent'):
                    print(f"\n‚úÖ E-mail enviado com sucesso para: {email_destinatario}")
                else:
                    print(f"\n‚ùå Erro no envio do e-mail: {result.get('email_message', 'Erro desconhecido')}")
                    print("\nVerifique:")
                    print("1. Credenciais no arquivo .env")
                    print("2. Senha de app do Gmail configurada")
                    print("3. Conex√£o com a internet")
            
        else:
            print(f"Erro na analise: {result.get('result', 'Erro desconhecido')}")
            
    except Exception as e:
        print(f"Erro durante a execucao: {e}")
    
    print("\n" + "=" * 60)

if __name__ == "__main__":
    # Verificar se foi passado um e-mail como argumento
    import sys
    email_destinatario = None
    
    if len(sys.argv) > 1:
        email_destinatario = sys.argv[1]
        print(f"E-mail de destino configurado: {email_destinatario}")
    
    # Execu√ß√£o r√°pida como padr√£o
    executar_analise_rapida(email_destinatario)
    
    # Iniciar o app Bedrock para modo IA
    print("\nPara usar o agente de IA, execute: app.run()")
    # app.run()
        